Testing :


ibm-dp.q  - challenging v1, b6,1

16 threads
finished : 237.77s
real : 3m57.78 s

serial
start la 15:21 : 4-16-1-6
		 15:26 : 4-16-8-11
		 15:30 : 4-16-8-12
		 15:34 : 4-16-9-11

		 15:50 : 6-16-8-11
		 16:04 : 6-16-11-10

		 16:13 : 9-16-1-11
		 16:24 : 9-16-8-6
		 16:34 : 9-16-8-11
		 17:01 : 9-16-8-12
		 17:19 : 9-16-13-12

		 17:24 : 10-16-6-12
		 17:31 : 10-16-8-11
		 17:37 : 10-16-11-6

		 17:38 : 13-16-8-6
		 17:42 : 13-16-8-11






















sudoku_elem  ->	val
			 ->	fixed
			   
tried_value  -> rowPos
			 -> colPos
			 -> value

allTriedValues  -> count
				-> size
				-> allValues[] (tried_value)
			
grid = sudoku_elem[][]


 /*   Insert a valid value in a random selected place  */
 int insertValuesInSudokuGrid(sudoku_elem **grid)  
 
   /*  Set the row and col with the first empty box  */
 int getUnfilledPosition(sudoku_elem **grid, int *row, int *col) 
 
  /* Returns 1: if no duplicates found in the sudoku constraints */  
 int verifyRules(sudoku_elem** grid, int rowPos, int colPos, int valToCheck)  
 
 /*  Insert a 'tried value' (row, col, val) into the allValues array  */
 int insertIntoTriedValues(allTriedValues *a, int row, int col, int value)